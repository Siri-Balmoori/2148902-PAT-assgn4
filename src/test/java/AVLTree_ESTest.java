/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 17 02:55:09 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {


  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1);
      aVLTree0.insert((-926));
      aVLTree0.delete(190);
      aVLTree0.insert(1678);
      aVLTree0.insert(0);
      aVLTree0.insert(190);
      aVLTree0.delete(1);
      aVLTree0.delete(0);
      aVLTree0.insert(1);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      aVLTree_Node0.key = 3603;
      aVLTree0.height();
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node((-571));
      aVLTree_Node1.key = 3603;
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.find(3893);
      aVLTree0.delete((-1695));
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.insert(1);
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1);
      aVLTree0.insert((-926));
      aVLTree0.delete(190);
      aVLTree0.insert(1678);
      aVLTree0.insert(0);
      aVLTree0.insert(190);
      aVLTree0.delete(1);
      aVLTree0.delete(0);
      aVLTree0.delete(190);
      aVLTree0.insert(1);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      aVLTree_Node0.key = 3603;
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.find(3893);
      aVLTree0.delete((-1695));
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.insert(0);
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 1443;
      aVLTree0.insert(1443);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node(0);
      aVLTree_Node0.left = aVLTree_Node1;
      AVLTree.Node aVLTree_Node2 = aVLTree_Node0.left;
      aVLTree_Node2.right = aVLTree_Node0.left;
      aVLTree0.getBalance(aVLTree_Node2);
      aVLTree_Node1.right = aVLTree_Node2.right;
      // Undeclared exception!
      aVLTree0.find(1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-1226));
      aVLTree0.delete((-1226));
      aVLTree0.insert(0);
      aVLTree_Node0.height = (-1226);
      aVLTree_Node0.key = 921;
      aVLTree_Node0.key = 1157;
      aVLTree_Node0.height = (-1464);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.insert(19);
      aVLTree_Node0.key = (-1464);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.delete((-1464));
      aVLTree_Node0.key = (-1226);
      aVLTree0.insert(1);
      aVLTree0.insert((-1464));
      aVLTree0.delete((-1464));
      aVLTree_Node0.height = 19;
      aVLTree0.height();
      aVLTree_Node1.height = 103;
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.find((-467));
      aVLTree0.height();
      aVLTree0.getRoot();
      // Undeclared exception!
      try { 
        aVLTree0.insert(1157);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      int int0 = 2232;
      aVLTree0.insert(2232);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete((-110));
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node1.key = 0;
      aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node1);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-328));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.delete(1);
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.delete(502);
      aVLTree0.getRoot();
      int int0 = aVLTree0.height();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(437);
      aVLTree0.insert(437);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.find(437);
      aVLTree0.find(978);
      aVLTree0.insert((-1));
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree aVLTree1 = new AVLTree();
      aVLTree1.delete(0);
      aVLTree1.delete(0);
      aVLTree1.getRoot();
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
      
      int int1 = aVLTree0.height();
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-485));
      aVLTree0.insert(0);
      aVLTree0.insert((-1));
      aVLTree0.height();
      int int0 = aVLTree0.height();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1989));
      aVLTree0.delete((-1989));
      aVLTree0.delete((-1203));
      aVLTree0.delete((-1203));
      aVLTree0.insert((-1989));
      aVLTree0.insert(0);
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.insert(2576);
      aVLTree0.delete(3746);
      aVLTree0.delete((-1931));
      int int0 = aVLTree0.height();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-1226));
      aVLTree0.delete((-1226));
      aVLTree0.insert(0);
      aVLTree_Node0.height = (-1226);
      int int0 = 1157;
      aVLTree_Node0.key = 921;
      aVLTree_Node0.key = 1157;
      aVLTree_Node0.height = (-1464);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.insert(19);
      aVLTree_Node0.key = (-1464);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.delete((-1464));
      aVLTree_Node0.key = (-1226);
      aVLTree0.insert(1);
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree0.insert((-1464));
      aVLTree0.delete((-1464));
      aVLTree_Node0.height = 19;
      aVLTree0.height();
      aVLTree_Node1.height = 103;
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      // Undeclared exception!
      try { 
        aVLTree0.delete(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1443);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node(0);
      aVLTree_Node0.left = aVLTree_Node1;
      AVLTree.Node aVLTree_Node2 = aVLTree_Node0.left;
      AVLTree.Node aVLTree_Node3 = aVLTree_Node2.right;
      aVLTree_Node2.right = null;
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree_Node1.right = null;
      aVLTree0.find(0);
      // Undeclared exception!
      try { 
        aVLTree0.delete(1443);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-700));
      aVLTree0.delete((-700));
      aVLTree0.insert(0);
      aVLTree0.insert((-20));
      aVLTree0.find((-20));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(470);
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
      
      aVLTree0.find((-1));
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.find(2153);
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(2153);
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert(2846);
      aVLTree0.delete((-1877));
      aVLTree0.delete(1357);
      aVLTree0.insert(192);
      aVLTree0.delete(192);
      aVLTree0.insert(192);
      aVLTree0.getRoot();
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
      aVLTree0.insert(1);
      aVLTree0.insert(0);
      // Undeclared exception!
      try { 
        aVLTree0.delete(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(458);
      aVLTree0.insert(949);
      aVLTree0.find((-697));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(399);
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-11));
      aVLTree0.delete((-11));
      aVLTree0.delete((-1));
      aVLTree0.insert((-11));
      int int0 = 0;
      aVLTree0.insert((-3726));
      aVLTree0.insert(0);
      aVLTree0.insert(80);
      aVLTree0.delete(80);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-1903));
      aVLTree0.insert((-1903));
      aVLTree0.delete(80);
      aVLTree0.delete(80);
      aVLTree0.height();
      int int1 = 1;
      // Undeclared exception!
      try { 
        aVLTree0.insert((-11));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-81));
      aVLTree0.delete(1443);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1);
      aVLTree0.insert(288);
      // Undeclared exception!
      try { 
        aVLTree0.insert(288);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1631));
      aVLTree0.insert((-472));
      int int0 = aVLTree0.height();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-893));
      int int0 = aVLTree0.height();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1443);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-3332));
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-147));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-907));
      aVLTree0.insert(2);
      aVLTree0.insert(170);
      aVLTree0.delete(170);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-926));
      aVLTree0.delete(190);
      aVLTree0.insert(1678);
      aVLTree0.insert(0);
      aVLTree0.insert(190);
      aVLTree0.delete(0);
      aVLTree0.insert(1);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      aVLTree_Node0.key = 3603;
      aVLTree0.height();
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node(3603);
      aVLTree_Node1.key = 3603;
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getRoot();
      aVLTree0.insert(1);
      aVLTree0.getRoot();
      aVLTree0.find(0);
      assertEquals(2, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
      
      int int1 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(3474);
      aVLTree0.insert(307);
      aVLTree0.insert((-18));
      // Undeclared exception!
      try { 
        aVLTree0.insert((-18));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }
}
