/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 05:20:31 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-1365));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1365));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(2486);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-589));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-589));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-589));
      assertEquals(1, aVLTree0.height());
      
      int int0 = (-265);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-265));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      int int1 = 399;
      aVLTree0.insert(399);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-265));
      assertEquals(1, aVLTree0.height());
      
      int int2 = aVLTree0.height();
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, aVLTree0.height());
      
      int int3 = aVLTree0.height();
      assertEquals(1, int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.right = aVLTree_Node0;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.height = (-1725);
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-1365));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1365));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(2486);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-589));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-589));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-589));
      assertEquals(1, aVLTree0.height());
      
      int int0 = (-265);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-265));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node0.left = aVLTree_Node1;
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertSame(aVLTree_Node2, aVLTree_Node1);
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node2);
      
      aVLTree0.insert(399);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-265));
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(1, aVLTree0.height());
      
      int int2 = aVLTree0.height();
      assertEquals(1, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(2, aVLTree0.height());
      
      aVLTree_Node2.left = aVLTree_Node0;
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      aVLTree0.delete(399);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-1365));
      assertEquals((-1), aVLTree0.height());
      
      int int0 = (-589);
      aVLTree0.insert((-1365));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(2486);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-589));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-589));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-589));
      assertEquals(1, aVLTree0.height());
      
      int int1 = (-251);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-251));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      int int2 = 399;
      aVLTree0.insert(399);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-251));
      assertEquals(1, aVLTree0.height());
      
      int int3 = aVLTree0.height();
      assertEquals(1, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.height = 399;
      assertEquals(1, aVLTree0.height());
      
      int int4 = aVLTree0.height();
      assertEquals(1, int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertEquals(1, aVLTree0.height());
      
      int int5 = 0;
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-1365));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1365));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(2486);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-589));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-589));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-589));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-265));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      aVLTree0.insert(399);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-265));
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, int0);
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(2, aVLTree0.height());
      
      aVLTree_Node1.left = aVLTree_Node0;
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(399);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      int int2 = aVLTree0.getBalance(aVLTree_Node1);
      assertEquals(0, int2);
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert((-265));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-3386));
      assertEquals((-1), aVLTree0.height());
      
      int int0 = (-1);
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree_Node0.left = aVLTree_Node0;
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node0.right = aVLTree_Node1;
      assertEquals(0, aVLTree0.height());
      
      int int1 = 1;
      // Undeclared exception!
      aVLTree0.delete((-1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-1365));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1365));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(2486);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-589));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-589));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-589));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-265));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      aVLTree0.insert(399);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-265));
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, int0);
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(399);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      int int2 = aVLTree0.getBalance(aVLTree_Node1);
      assertEquals(0, int2);
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-265));
      assertEquals(1, aVLTree0.height());
      
      int int3 = aVLTree0.height();
      assertEquals(1, int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.left = aVLTree_Node0;
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      assertNotSame(aVLTree_Node2, aVLTree_Node1);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node1));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node2);
      
      aVLTree_Node2.right = aVLTree_Node1;
      assertEquals(1, aVLTree0.height());
      
      int int4 = aVLTree0.getBalance(aVLTree_Node1);
      assertEquals((-1), int4);
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertNotSame(aVLTree_Node1, aVLTree_Node2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node2));
      assertEquals(1, aVLTree0.height());
      
      int int5 = aVLTree0.getBalance(aVLTree_Node2);
      assertEquals(0, int5);
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      assertNotSame(aVLTree_Node2, aVLTree_Node1);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node1));
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertTrue(int5 == int2);
      assertFalse(int5 == int1);
      assertEquals(1, aVLTree0.height());
      
      int int6 = aVLTree0.getBalance(aVLTree_Node1);
      assertEquals((-1), int6);
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertNotSame(aVLTree_Node1, aVLTree_Node2);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node2));
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertEquals(1, aVLTree0.height());
      
      int int7 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, int7);
      assertNotSame(aVLTree_Node0, aVLTree_Node2);
      assertNotSame(aVLTree_Node0, aVLTree_Node1);
      assertFalse(aVLTree_Node0.equals((Object)aVLTree_Node2));
      assertFalse(aVLTree_Node0.equals((Object)aVLTree_Node1));
      assertFalse(int7 == int1);
      assertTrue(int7 == int5);
      assertFalse(int7 == int6);
      assertTrue(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      assertFalse(int7 == int3);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.find(0);
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-402));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-1798));
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, int0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree_Node0.height = 0;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.key = 1;
      assertEquals(0, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(964);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(964);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(613);
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1139));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(613);
      assertEquals(0, aVLTree0.height());
      assertNull(aVLTree_Node2);
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(0, aVLTree0.height());
      
      int int2 = aVLTree0.height();
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(3572);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(3572);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-2860));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-2860));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree_Node0.height = (-2860);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node0.left = aVLTree_Node1;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.key = 0;
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree_Node0.left;
      assertSame(aVLTree_Node2, aVLTree_Node1);
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertNotNull(aVLTree_Node2);
      
      aVLTree_Node0.left = aVLTree_Node2;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.right = aVLTree_Node2;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.height = (-2860);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.key = 0;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.key = 0;
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, int0);
      assertNotSame(aVLTree_Node0, aVLTree_Node1);
      assertNotSame(aVLTree_Node0, aVLTree_Node2);
      assertFalse(aVLTree_Node0.equals((Object)aVLTree_Node1));
      assertFalse(aVLTree_Node0.equals((Object)aVLTree_Node2));
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node2.right = aVLTree_Node0;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.right = aVLTree_Node2.right;
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      aVLTree0.find(4006);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = 0;
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1666);
      assertEquals(0, aVLTree0.height());
      
      int int1 = (-1888);
      aVLTree0.delete((-1888));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1888));
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-3386));
      assertEquals((-1), aVLTree0.height());
      
      int int0 = (-1);
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      assertNull(aVLTree_Node1);
      
      aVLTree_Node0.left = null;
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertSame(aVLTree_Node2, aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node2);
      
      aVLTree_Node0.right = aVLTree_Node2;
      assertEquals(0, aVLTree0.height());
      
      int int1 = 1;
      aVLTree0.delete((-1));
      assertEquals(3, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(6, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(int1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-1809));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-52));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(1);
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      int int0 = aVLTree0.height();
      assertEquals(1, int0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertSame(aVLTree_Node2, aVLTree_Node0);
      assertNotSame(aVLTree_Node2, aVLTree_Node1);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node1));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node2);
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.find(0);
      assertNotSame(aVLTree_Node3, aVLTree_Node1);
      assertSame(aVLTree_Node3, aVLTree_Node2);
      assertSame(aVLTree_Node3, aVLTree_Node0);
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node1));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node3);
      
      aVLTree0.delete(465);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-50));
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-50));
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = 0;
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-3349));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-3349));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-399));
      assertEquals(1, aVLTree0.height());
      
      int int1 = 1846;
      int int2 = (-844);
      aVLTree0.delete((-399));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-844));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1846);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1846);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-399));
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(1846);
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(2232);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(2232);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1501));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1321));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(2232);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1154));
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      aVLTree0.delete(703);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = 0;
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-4148));
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-1802));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree_Node0.key = (-1802);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, int0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(2568);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(2568);
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(0, int0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(2568);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-592));
      assertEquals(0, aVLTree0.height());
      assertNull(aVLTree_Node1);
      
      int int1 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-2895));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertSame(aVLTree_Node2, aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node2);
      
      aVLTree0.insert((-4134));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-1));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1686);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1686);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-557));
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      aVLTree0.insert((-557));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      assertEquals(0, aVLTree0.height());
      assertNull(aVLTree_Node1);
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node2);
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.getRoot();
      assertSame(aVLTree_Node3, aVLTree_Node2);
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node3);
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node4 = aVLTree0.find(0);
      assertNotSame(aVLTree_Node4, aVLTree_Node2);
      assertNotSame(aVLTree_Node4, aVLTree_Node3);
      assertFalse(aVLTree_Node4.equals((Object)aVLTree_Node2));
      assertFalse(aVLTree_Node4.equals((Object)aVLTree_Node3));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node4);
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node4.right = aVLTree_Node2;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node2.key = 0;
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(2619);
      assertEquals(2, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node4);
      assertEquals(0, int1);
      assertNotSame(aVLTree_Node4, aVLTree_Node2);
      assertNotSame(aVLTree_Node4, aVLTree_Node3);
      assertTrue(int1 == int0);
      assertFalse(aVLTree_Node4.equals((Object)aVLTree_Node2));
      assertFalse(aVLTree_Node4.equals((Object)aVLTree_Node3));
      assertEquals(2, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-674));
      assertEquals(0, aVLTree0.height());
      
      int int0 = 0;
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      int int1 = (-883);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1181);
      assertEquals(0, aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = (-1648);
      aVLTree0.delete((-1));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1648));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1648));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1648));
      assertEquals(0, aVLTree0.height());
      
      int int1 = (-3293);
      aVLTree0.delete((-3293));
      assertEquals(0, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1648));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(5633);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(5633);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1664);
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(1664);
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-1957));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-3857));
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(0, int0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1545);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.insert((-3857));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-683));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1241);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(1);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(523);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-2521));
      assertEquals(0, aVLTree0.height());
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-1696));
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1365));
      aVLTree0.insert(2486);
      aVLTree0.insert((-589));
      aVLTree0.insert(0);
      aVLTree0.delete((-589));
      aVLTree0.delete(2486);
      aVLTree0.insert((-589));
      aVLTree0.height();
      aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.height();
      aVLTree0.delete((-1));
      aVLTree0.insert(0);
      aVLTree0.insert((-1));
      aVLTree0.find(1);
      aVLTree0.insert((-1280));
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.find((-1280));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-2912));
      int int0 = 21;
      aVLTree0.insert(21);
      int int1 = 475;
      aVLTree0.insert(475);
      // Undeclared exception!
      try { 
        aVLTree0.insert(21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }
}
